//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `House.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let House = _ModuleRegistry.module("House");

    House.InputException = class extends Ice.UserException
    {
        constructor(reason = "Ivalid input", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::House::InputException";
        }

        _mostDerivedType()
        {
            return House.InputException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    House.DoorOpenException = class extends Ice.UserException
    {
        constructor(reason = "Doors should be closed", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::House::DoorOpenException";
        }

        _mostDerivedType()
        {
            return House.DoorOpenException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    House.UnsafeInteriorExeption = class extends Ice.UserException
    {
        constructor(reason = "There is unexpected item in the oven", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::House::UnsafeInteriorExeption";
        }

        _mostDerivedType()
        {
            return House.UnsafeInteriorExeption;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    House.WorkingOvenException = class extends Ice.UserException
    {
        constructor(reason = "The oven is currently working", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::House::WorkingOvenException";
        }

        _mostDerivedType()
        {
            return House.WorkingOvenException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    House.ovenMode = Slice.defineEnum([
        ['FANOVEN', 0], ['GRILL', 1], ['BOTTOMHEATING', 2], ['CONVENTIONALHEATING', 3]]);

    House.ovenInterior = Slice.defineEnum([
        ['EMPTY', 0], ['SAFE', 1], ['UNKNOWN', 2]]);

    const iceC_House_Oven_ids = [
        "::House::Oven",
        "::Ice::Object"
    ];

    House.Oven = class extends Ice.Object
    {
    };

    House.OvenPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(House.Oven, House.OvenPrx, iceC_House_Oven_ids, 0,
        {
            "changeInterior": [, , , , , [[House.ovenInterior._helper]], , , , ],
            "toggleDoor": [, , , , , , ,
                [
                    House.WorkingOvenException
                ], , ],
            "changeSettings": [, , , , [1], [[3, , 1], [House.ovenMode._helper, , 2], [3, , 3]], , , , ],
            "turnOff": [, , , , , , , , , ],
            "turnOn": [, , , , , [[3], [House.ovenMode._helper], [3, , 4]], ,
                [
                    House.DoorOpenException,
                    House.UnsafeInteriorExeption
                ], , ],
            "isTurnedOn": [, , , , [1], , , , , ],
            "getInfo": [, , , , [7], , , , , ]
        });

    House.LightMode = Slice.defineEnum([
        ['NORMAL', 0], ['NIGHTMODE', 1], ['PARTYMODE', 2], ['READINGMODE', 3]]);

    const iceC_House_Light_ids = [
        "::House::Light",
        "::Ice::Object"
    ];

    House.Light = class extends Ice.Object
    {
    };

    House.LightPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(House.Light, House.LightPrx, iceC_House_Light_ids, 0,
        {
            "turnOn": [, , , , , , , , , ],
            "turnOff": [, , , , , , , , , ],
            "setBrightness": [, , , , , [[3]], , , , ],
            "automaticTurnOff": [, , , , [7], [[3]], , , , ],
            "getInfo": [, , , , [7], , , , , ]
        });

    const iceC_House_RGBLight_ids = [
        "::House::Light",
        "::House::RGBLight",
        "::Ice::Object"
    ];

    House.RGBLight = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                House.Light
            ];
        }
    };

    House.RGBLightPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                House.LightPrx];
        }
    };

    Slice.defineOperations(House.RGBLight, House.RGBLightPrx, iceC_House_RGBLight_ids, 1,
        {
            "setColor": [, , , , , [[3], [3], [3]], ,
                [
                    House.InputException
                ], , ]
        });
    exports.House = House;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
    typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
        (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
    typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
        (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
